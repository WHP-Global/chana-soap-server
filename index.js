import express from "express";
import nodemailer from "nodemailer";
import cors from "cors";
import dotenv from "dotenv";
import path from "path";
import { fileURLToPath } from "url";
import { dirname } from "path";
import multer from "multer";
import fs from "fs";

dotenv.config();

const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);
const app = express();

// ‡πÉ‡∏´‡πâ‡πÄ‡∏™‡∏¥‡∏£‡πå‡∏ü static ‡∏Å‡πà‡∏≠‡∏ô
const publicPath = path.join(__dirname, "public");
app.use(express.static(publicPath));

// ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÉ‡∏´‡πâ‡∏£‡∏±‡∏ö‡∏Ñ‡∏≥‡∏Ç‡∏≠‡∏à‡∏≤‡∏Å‡πÇ‡∏î‡πÄ‡∏°‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£
const corsOptions = {
  origin: function (origin, callback) {
    const allowedOrigins = [
      "https://www.artandalice.co",
      "https://artandalice.co",
      "http://localhost:5173",
    ];
    // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö request ‡πÅ‡∏ö‡∏ö‡πÑ‡∏°‡πà‡∏°‡∏µ Origin (‡πÄ‡∏ä‡πà‡∏ô curl ‡∏´‡∏£‡∏∑‡∏≠ server-side), ‡πÉ‡∏´‡πâ‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï
    if (!origin || allowedOrigins.includes(origin)) {
      callback(null, true);
    } else {
      callback(new Error("Not allowed by CORS"));
    }
  },
  credentials: true, // ‚úÖ ‡∏´‡∏≤‡∏Å‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ cookies/token
  methods: ["GET", "POST", "PUT", "OPTIONS"],
  allowedHeaders: ["Content-Type", "Authorization"],
};

app.use(cors(corsOptions)); // ‡πÉ‡∏ä‡πâ cors ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤
app.use(express.json());

const transporter = nodemailer.createTransport({
  host: "smtp.zoho.com", // Zoho SMTP
  port: 465,
  secure: true, // ‡πÉ‡∏ä‡πâ SSL
  auth: {
    user: process.env.EMAIL_USER, // Zoho email user ‡πÄ‡∏ä‡πà‡∏ô "chanasoapsetting@gmail.com"
    pass: process.env.EMAIL_PASS, // ‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô Zoho ‡∏´‡∏£‡∏∑‡∏≠ App Password (‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡∏¥‡∏î 2FA)
  },
});

app.post("/send-email", async (req, res) => {
  console.log("req.body", req.body);
  const { dataFromInput, subject } = req.body;
  const emailOptions = {
    from: `"Art & Alice Website Contact" <info@artandalice.co>`,
    to: "info@artandalice.co",
    replyTo: dataFromInput.email,
    subject: `‡∏à‡∏≤‡∏Å‡∏Ñ‡∏∏‡∏ì ${dataFromInput.name} - ${subject}`,
    html: `
    <p><strong>‡∏ä‡∏∑‡πà‡∏≠-‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•:</strong> ${dataFromInput.name}</p>
    <p><strong>‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡πå:</strong> ${dataFromInput.email}</p>
    <p><strong>‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå:</strong> ${dataFromInput.phone}</p>
    <hr />
    <p><strong>‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î:</strong></p>
    <p>${dataFromInput.message}</p>
  `,
  };
  ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Ñ‡∏∏‡∏ì‡πÉ‡∏ä‡πâ‡πÅ‡∏ö‡∏ö‡∏ô‡∏µ‡πâ: try {
    await transporter.sendMail(emailOptions);
    console.log("Verification email sent!");
    res.status(200).json({ message: "Email sent successfully" });
  } catch (error) {
    console.error("Error sending email:", error);
    res.status(500).json({ error: "Failed to send email" });
  }
});

// ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ storage ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö multer
const storage = multer.diskStorage({
  destination: (req, file, cb) => {
    const folderName = req.body.folderName;
    const targetPath = path.join("public", folderName);
    cb(null, targetPath);
  },
  filename: (req, file, cb) => {
    // ‡∏î‡∏∂‡∏á‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå‡∏à‡∏≤‡∏Å‡∏ü‡∏≠‡∏£‡πå‡∏°
    const filenameWithoutExtension = req.body.filename; // ‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏à‡∏≤‡∏Å frontend

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•‡πÑ‡∏ü‡∏•‡πå
    const extension = path.extname(file.originalname).toLowerCase();

    // ‡∏ï‡∏±‡πâ‡∏á‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå‡πÉ‡∏´‡∏°‡πà‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô .jpg ‡∏´‡∏£‡∏∑‡∏≠ .jpeg
    const newFileName =
      filenameWithoutExtension + (extension === ".jpeg" ? ".jpg" : extension); // ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô .jpeg ‡πÄ‡∏õ‡πá‡∏ô .jpg ‡∏ñ‡πâ‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£

    cb(null, newFileName); // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå‡πÉ‡∏´‡∏°‡πà
  },
});

const upload = multer({
  storage,
  limits: { fileSize: 50 * 1024 * 1024 }, // 50MB
});

// Route ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå (‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÑ‡∏ü‡∏•‡πå)
const allowedExtensions = [".jpg", ".jpeg", ".png", ".webp"];

app.put("/upload", upload.single("file"), async (req, res) => {
  try {
    const uploadedFile = req.file;
    const customFileName = req.body.filename;
    const folderName = req.body.folderName; // ‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ä‡∏∑‡πà‡∏≠‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå

    if (!uploadedFile) {
      return res
        .status(400)
        .json({ success: false, message: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î" });
    }

    if (!customFileName) {
      return res
        .status(400)
        .json({ success: false, message: "‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå‡πÉ‡∏´‡∏°‡πà" });
    }

    if (!folderName) {
      return res
        .status(400)
        .json({ success: false, message: "‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏‡∏ä‡∏∑‡πà‡∏≠‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå" });
    }

    // ‡πÄ‡∏ä‡πá‡∏Ñ‡πÉ‡∏´‡πâ‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏ß‡πà‡∏≤‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á‡∏°‡∏≤‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï
    const allowedFolders = [
      "AboutUs",
      "ActiveFresh",
      "AloeVera",
      "ContactUs",
      "EmpoweringFarmerProject",
      "EqLife",
      "GentleGlow",
      "logo",
      "Products",
      "Projects",
    ];

    if (!allowedFolders.includes(folderName)) {
      return res
        .status(400)
        .json({ success: false, message: "‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ó‡∏µ‡πà‡∏£‡∏∞‡∏ö‡∏∏‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á" });
    }

    const folderPath = path.join(__dirname, "public", folderName);
    const newExtension = path.extname(uploadedFile.originalname).toLowerCase(); // ‡πÄ‡∏ä‡πà‡∏ô .jpeg
    const baseName = path.basename(
      customFileName,
      path.extname(customFileName)
    ); // ‡πÄ‡∏ä‡πà‡∏ô "swimming"
    const newFileName = baseName + newExtension;
    const newFilePath = path.join(folderPath, newFileName);

    // üî• ‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏Å‡πà‡∏≤‡∏ó‡∏∏‡∏Å‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏• ‡πÄ‡∏ä‡πà‡∏ô swimming.jpg, swimming.jpeg, swimming.png
    for (const ext of allowedExtensions) {
      const oldFilePath = path.join(folderPath, baseName + ext);
      if (fs.existsSync(oldFilePath)) {
        fs.unlinkSync(oldFilePath);
        console.log(`‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏Å‡πà‡∏≤: ${oldFilePath}`);
      }
    }

    // ‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ü‡∏•‡πå‡πÉ‡∏´‡∏°‡πà
    fs.renameSync(uploadedFile.path, newFilePath);

    return res
      .status(200)
      .json({ success: true, filePath: `/${folderName}/${newFileName}` });
  } catch (error) {
    console.error("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î:", error);
    return res.status(500).json({ success: false, message: "‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß" });
  }
});

// ‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏ü‡∏•‡πå‡πÅ‡∏ö‡∏ö recursive
const getAllImagePaths = (dirPath, baseUrl = "") => {
  let imagePaths = [];
  const files = fs.readdirSync(dirPath);

  for (const file of files) {
    const fullPath = path.join(dirPath, file);
    const relPath = path.join(baseUrl, file);
    const stat = fs.statSync(fullPath);

    if (stat.isDirectory()) {
      imagePaths = imagePaths.concat(getAllImagePaths(fullPath, relPath));
    } else if (
      [".jpg", ".jpeg", ".png", ".gif", ".webp", ".jfif"].includes(
        path.extname(file).toLowerCase()
      )
    ) {
      imagePaths.push("/" + relPath.replace(/\\/g, "/")); // ‡∏õ‡∏£‡∏±‡∏ö‡πÉ‡∏´‡πâ URL ‡πÉ‡∏ä‡πâ / ‡πÅ‡∏°‡πâ‡πÄ‡∏õ‡πá‡∏ô Windows
    }
  }

  return imagePaths;
};

// Endpoint ‡∏î‡∏∂‡∏á‡∏ó‡∏∏‡∏Å‡∏£‡∏π‡∏õ
app.get("/images", (req, res) => {
  try {
    const allImages = getAllImagePaths(publicPath);
    res.json({ success: true, images: allImages });
  } catch (error) {
    console.error("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡πà‡∏≤‡∏ô‡∏£‡∏π‡∏õ:", error);
    res.status(500).json({ success: false, message: "‡∏î‡∏∂‡∏á‡∏£‡∏π‡∏õ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à" });
  }
});

app.listen(8888, "0.0.0.0", () => console.log("Server running on port 8888"));
